const METRIC_STATUS_LEVELS = {
    'CO‚ÇÇ': [
        { level: 'Th·∫•p', range: '< 400 ppm', description: 'C√¢y quang h·ª£p ch·∫≠m, c·∫ßn b·ªï sung CO‚ÇÇ.', color: '#64b5f6' }, // blue
        { level: 'T·ªëi ∆∞u', range: '800 - 1200 ppm', description: 'M·ª©c ƒë·ªô l√Ω t∆∞·ªüng cho s·ª± ph√°t tri·ªÉn c·ªßa c√¢y.', color: '#66bb6a' }, // green
        { level: 'Cao', range: '1201 - 2000 ppm', description: 'N·ªìng ƒë·ªô cao, c√≥ th·ªÉ kh√¥ng hi·ªáu qu·∫£, c·∫ßn th√¥ng gi√≥.', color: '#ffa726' }, // orange
        { level: 'Nguy hi·ªÉm', range: '> 2000 ppm', description: 'N·ªìng ƒë·ªô r·∫•t cao, c√≥ th·ªÉ g√¢y h·∫°i cho c√¢y.', color: '#ef5350' } // red
    ],

    '√Ånh s√°ng': [
        { level: 'L·∫°nh', range: '< 18¬∞C', description: 'Qu√° l·∫°nh, c√¢y ph√°t tri·ªÉn ch·∫≠m.', color: '#64b5f6' },
        { level: 'T·ªëi ∆∞u', range: '22¬∞C - 28¬∞C', description: 'Nhi·ªát ƒë·ªô l√Ω t∆∞·ªüng cho h·∫ßu h·∫øt c√°c lo·∫°i c√¢y.', color: '#66bb6a' },
        { level: 'N√≥ng', range: '> 30¬∞C', description: 'Qu√° n√≥ng, c√¢y c√≥ th·ªÉ b·ªã stress nhi·ªát.', color: '#ef5350' }
    ],

    'ƒê·ªô ·∫©m kh√¥ng kh√≠': [
        { level: 'Kh√¥', range: '< 50%', description: 'Kh√¥ng kh√≠ kh√¥, c√¢y d·ªÖ m·∫•t n∆∞·ªõc.', color: '#ffa726' },
        { level: 'T·ªëi ∆∞u', range: '60% - 75%', description: 'ƒê·ªô ·∫©m ph√π h·ª£p cho s·ª± ph√°t tri·ªÉn.', color: '#66bb6a' },
        { level: '·∫®m ∆∞·ªõt', range: '> 85%', description: 'ƒê·ªô ·∫©m cao, d·ªÖ g√¢y n·∫•m m·ªëc v√† b·ªánh.', color: '#64b5f6' }
    ],

    'Nhi·ªát ƒë·ªô kh√¥ng kh√≠': [
        { level: 'L·∫°nh', range: '< 18¬∞C', description: 'Qu√° l·∫°nh, c√¢y ph√°t tri·ªÉn ch·∫≠m.', color: '#64b5f6' },
        { level: 'T·ªëi ∆∞u', range: '22¬∞C - 28¬∞C', description: 'Nhi·ªát ƒë·ªô l√Ω t∆∞·ªüng cho h·∫ßu h·∫øt c√°c lo·∫°i c√¢y.', color: '#66bb6a' },
    ],

    'ƒê·ªô ·∫©m ƒë·∫•t': [
        { level: 'Kh√¥', range: '< 40%', description: 'ƒê·∫•t qu√° kh√¥, c·∫ßn t∆∞·ªõi n∆∞·ªõc.', color: '#ef5350' },
        { level: 'T·ªëi ∆∞u', range: '50% - 70%', description: 'ƒê·ªô ·∫©m ƒë·∫•t ph√π h·ª£p cho s·ª± ph√°t tri·ªÉn c·ªßa c√¢y.', color: '#66bb6a' },
        { level: '·∫®m ∆∞·ªõt', range: '> 80%', description: 'ƒê·∫•t qu√° ·∫©m ', color: '#64b5f6' }
    ],

    'Nhi·ªát ƒë·ªô ƒë·∫•t': [
        { level: 'L·∫°nh', range: '< 18¬∞C', description: 'Qu√° l·∫°nh, c√¢y ph√°t tri·ªÉn ch·∫≠m.', color: '#64b5f6' },
        { level: 'T·ªëi ∆∞u', range: '22¬∞C - 28¬∞C', description: 'Nhi·ªát ƒë·ªô l√Ω t∆∞·ªüng cho h·∫ßu h·∫øt c√°c lo·∫°i c√¢y.', color: '#66bb6a' },
    ],
    'default': [
        { level: 'B√¨nh th∆∞·ªùng', range: 'N/A', description: 'Th√¥ng s·ªë trong ng∆∞·ª°ng an to√†n.', color: '#66bb6a' }
    ]
};



// src/pages/DashBoard/index.jsx
import React, { useState, useEffect } from "react";
import {
  Box, Divider, List, ListItem,
  ListItemIcon, ListItemText, Typography, Stack,
  CircularProgress, Alert, AppBar, Toolbar, IconButton,
  Menu, MenuItem, Avatar
} from "@mui/material";

import HomeIcon from "@mui/icons-material/Home";
import LocalFloristIcon from "@mui/icons-material/LocalFlorist";
import NotificationsActiveIcon from "@mui/icons-material/NotificationsActive";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";
import QueryStatsIcon from "@mui/icons-material/QueryStats";
import Co2Icon from "@mui/icons-material/Co2";
import WbSunnyIcon from "@mui/icons-material/WbSunny";
import ThermostatIcon from "@mui/icons-material/Thermostat";
import OpacityIcon from "@mui/icons-material/Opacity";
import ScienceIcon from "@mui/icons-material/Science";
import MenuIcon from "@mui/icons-material/Menu";
import { useNavigate } from 'react-router-dom';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Card, InfoCard, Dot } from "../../components/StyledComponent";
import Metric from "../../components/Metrics";
import StatusLevelModal from "../../components/StatusLevelModal";

// ====================================================================
// üß© MOCK DATA
// ====================================================================
const mockDashboardData = {
  name: "Nh√† k√≠nh Mockup",
  plant: "X√† l√°ch 4 m√πa (D·ªØ li·ªáu gi·∫£)",
  status: "·ªîn ƒë·ªãnh",
  metrics: [
    { id: 1, label: "CO‚ÇÇ", value: "1150 ppm", icon: <Co2Icon /> },
    { id: 2, label: "√Ånh s√°ng", value: "7500 lux", icon: <WbSunnyIcon /> },
    { id: 3, label: "Nhi·ªát ƒë·ªô kh√¥ng kh√≠", value: "27¬∞C", icon: <ThermostatIcon /> },
    { id: 4, label: "ƒê·ªô ·∫©m kh√¥ng kh√≠", value: "68%", icon: <OpacityIcon /> },
    { id: 5, label: "ƒê·ªô ·∫©m ƒë·∫•t", value: "62%", icon: <OpacityIcon /> },
    { id: 6, label: "Nhi·ªát ƒë·ªô ƒë·∫•t", value: "24¬∞C", icon: <ScienceIcon /> },
  ],
  notifications: [
    { id: 1, message: "H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông ·ªü ch·∫ø ƒë·ªô mockup.", time: "V·ª´a xong", type: 'info' },
    { id: 2, message: "Nhi·ªát ƒë·ªô kh√¥ng kh√≠ v∆∞·ª£t ng∆∞·ª°ng 32¬∞C.", time: "2 gi·ªù tr∆∞·ªõc", type: 'error' },
  ],
  chartData: [
    { time: "08:00", nhietdokk: 26, doamkk: 70 },
    { time: "10:00", nhietdokk: 28, doamkk: 68 },
    { time: "12:00", nhietdokk: 32, doamkk: 62 },
    { time: "14:00", nhietdokk: 31, doamkk: 65 },
  ],
};

const METRIC_STATUS_LEVELS = {
  'CO‚ÇÇ': [
    { level: 'Th·∫•p', range: '< 400 ppm', description: 'C√¢y quang h·ª£p ch·∫≠m, c·∫ßn b·ªï sung CO‚ÇÇ.', color: '#64b5f6' },
    { level: 'T·ªëi ∆∞u', range: '800 - 1200 ppm', description: 'M·ª©c ƒë·ªô l√Ω t∆∞·ªüng cho s·ª± ph√°t tri·ªÉn c·ªßa c√¢y.', color: '#66bb6a' },
    { level: 'Cao', range: '1201 - 2000 ppm', description: 'N·ªìng ƒë·ªô cao, c·∫ßn th√¥ng gi√≥.', color: '#ffa726' },
    { level: 'Nguy hi·ªÉm', range: '> 2000 ppm', description: 'C√≥ th·ªÉ g√¢y h·∫°i cho c√¢y.', color: '#ef5350' }
  ],
  'default': [
    { level: 'B√¨nh th∆∞·ªùng', range: 'N/A', description: 'Th√¥ng s·ªë trong ng∆∞·ª°ng an to√†n.', color: '#66bb6a' }
  ]
};

function DashboardPage() {
  const [dashboardData, setDashboardData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false);
  const [selectedMetric, setSelectedMetric] = useState(null);
  const [anchorEl, setAnchorEl] = useState(null);
  const openMenu = Boolean(anchorEl);
  const navigate = useNavigate();

  // üîß Gi·∫£ l·∫≠p t·∫£i mock data
  useEffect(() => {
    console.warn("üìä Dashboard ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô MOCKUP.");
    const timer = setTimeout(() => {
      setDashboardData(mockDashboardData);
      setLoading(false);
    }, 1000);
    return () => clearTimeout(timer);
  }, []);

  const handleMetricClick = (metric) => {
    setSelectedMetric(metric);
    setIsStatusModalOpen(true);
  };

  const handleCloseStatusModal = () => setIsStatusModalOpen(false);
  const handleClickMenu = (event) => setAnchorEl(event.currentTarget);
  const handleCloseMenu = () => setAnchorEl(null);
  const handleGoToSettings = () => {
    navigate('/settings'); // Chuy·ªÉn trang
    handleCloseMenu();     // ƒê√≥ng menu
  };
  const handleLogout = () => {
    // ... Logic ƒëƒÉng xu·∫•t ...
    navigate('/login');
    handleCloseMenu();
  };
  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>ƒêang t·∫£i d·ªØ li·ªáu mockup...</Typography>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        height: '100vh',
        backgroundImage: "url(/nen.png)",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundAttachment: 'fixed'
      }}
    >
      {/* Thanh AppBar */}
      <AppBar position="sticky" elevation={1}
        sx={{ background: "linear-gradient(to right, #97B067, #437057)", color: "white" }}>
        <Toolbar sx={{ display: 'flex', justifyContent: 'space-between' }}>
          <Typography variant="h5" fontWeight="bold">GREE</Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Typography sx={{ display: { xs: 'none', sm: 'block' } }}>Ng∆∞·ªùi d√πng Mockup</Typography>
            <Avatar alt="Mock User" />
            <IconButton color="inherit" onClick={handleClickMenu}>
              <MenuIcon />
            </IconButton>
            <Menu anchorEl={anchorEl} open={openMenu} onClose={handleCloseMenu}>
              <MenuItem onClick={handleLogout}>ƒêƒÉng xu·∫•t</MenuItem>
              <Divider />

              {/* S·ª¨A ·ªû ƒê√ÇY */}
              <MenuItem onClick={handleGoToSettings}>C√†i ƒê·∫∑t</MenuItem>
            </Menu>
          </Box>
        </Toolbar>
      </AppBar>

      {/* N·ªôi dung ch√≠nh */}
      <Box component="main" sx={{ flexGrow: 1, p: { xs: 2, md: 3 }, overflowY: 'auto' }}>
        <InfoCard>
          <Stack spacing={2}>
            <Stack direction="row" spacing={1.5} alignItems="center">
              <HomeIcon fontSize="large" />
              <Typography variant="h4" fontWeight={700}>{dashboardData.name}</Typography>
            </Stack>
            <Stack direction="row" spacing={1.5} alignItems="center">
              <LocalFloristIcon />
              <Typography variant="h6">{dashboardData.plant}</Typography>
            </Stack>
            <Stack direction="row" spacing={1} alignItems="center">
              <Dot />
              <Typography variant="h6">Tr·∫°ng th√°i: {dashboardData.status}</Typography>
            </Stack>
            <Divider sx={{ opacity: .3, my: 1 }} />
            <Box sx={{
              display: "grid",
              gridTemplateColumns: { xs: "repeat(2, 1fr)", md: "repeat(3, 1fr)" },
              gap: 2,
            }}>
              {dashboardData.metrics.map((m) => (
                <Metric key={m.id} {...m} onClick={() => handleMetricClick(m)} />
              ))}
            </Box>
          </Stack>
        </InfoCard>

        <Card sx={{ minWidth: 0, mt: 3 }}>
          <Stack spacing={4}>
            <Box>
              <Stack direction="row" spacing={1} alignItems="center" sx={{ mb: 1 }}>
                <NotificationsActiveIcon color="success" />
                <Typography variant="h6" fontWeight="bold">Th√¥ng b√°o 24h</Typography>
              </Stack>
              <Box sx={{ maxHeight: 240, overflowY: "auto", pr: 1 }}>
                <List dense>
                  {dashboardData.notifications.map((n) => (
                    <ListItem key={n.id} sx={{ mb: 1 }}>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        <WarningAmberIcon color={n.type === 'error' ? "error" : "warning"} />
                      </ListItemIcon>
                      <ListItemText
                        primary={<Typography fontWeight={500}>{n.message}</Typography>}
                        secondary={<Typography variant="caption">{n.time}</Typography>}
                      />
                    </ListItem>
                  ))}
                </List>
              </Box>
            </Box>

            <Box>
              <Stack direction="row" spacing={1} alignItems="center" sx={{ mb: 2 }}>
                <QueryStatsIcon color="success" />
                <Typography variant="h6" fontWeight="bold">Bi·ªÉu ƒë·ªì th√¥ng s·ªë</Typography>
              </Stack>
              <Box sx={{ height: 300 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={dashboardData.chartData} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="time" />
                    <YAxis yAxisId="left" />
                    <YAxis yAxisId="right" orientation="right" />
                    <Tooltip />
                    <Legend />
                    <Line yAxisId="left" type="monotone" dataKey="nhietdokk" stroke="#FF7300" name="Nhi·ªát ƒë·ªô KK (¬∞C)" />
                    <Line yAxisId="left" type="monotone" dataKey="doamkk" stroke="#228B22" name="ƒê·ªô ·∫©m KK (%)" />
                  </LineChart>
                </ResponsiveContainer>
              </Box>
            </Box>
          </Stack>
        </Card>
      </Box>

      <StatusLevelModal
        open={isStatusModalOpen}
        onClose={handleCloseStatusModal}
        metric={selectedMetric}
        levels={METRIC_STATUS_LEVELS[selectedMetric?.label] || METRIC_STATUS_LEVELS['default']}
      />
    </Box>
  );
}

export default DashboardPage;
